{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["override","css","_templateObject","getConnectionForExtention","name","Promise","resolve","axios","get","then","response","catch","error","sendThisFile","_callee3","file","obj","start","interval","end","fileSize","regenerator_default","a","wrap","_context3","prev","next","size","setState","percentage","toFixed","abrupt","blobThisFileAndSend","sent","stop","this","reader","FileReader","onloadend","_ref","Object","asyncToGenerator","mark","_callee2","evt","data","flag","_context2","target","readyState","DONE","result","sendData","_x4","apply","arguments","blob","slice","readAsBinaryString","post","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","File","FileList","Blob","console","log","alert","state","count","total","loading","handleChange","bind","assertThisInitialized","files","length","i","_this2","react_default","createElement","type","id","multiple","onChange","e","react_spinners","className","sizeUnit","color","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.307c6ac6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { css } from 'react-emotion';\n// First way to import\nimport { ClipLoader } from 'react-spinners';\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\nclass App extends Component {\n  constructor(props){\n    super(props)\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      console.log(\"good to go\");\n    } else {\n      alert('The File APIs are not fully supported in this browser.');\n    }\n    this.state = {\n      count : 0,\n      total : 0,\n      loading: false,\n      percentage: 0,\n    }\n    this.handleChange = this.handleChange.bind(this);\n    \n  }\n  async handleChange(files){\n    this.setState({\n      total:files.length,\n      loading: true,\n    });\n    for(let i = 0; i < files.length; i++){\n      this.setState({\n        count : i\n      });\n      let flag = await getConnectionForExtention(files[i].name);\n      if(flag){\n        await sendThisFile(files[i], this);\n      }\n      flag = await makeEndRequest();\n      if(!flag){\n        return;\n      }\n    }\n    this.setState({\n      count : files.length,\n      loading: false,\n    });\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <input \n          type=\"file\" \n          id=\"files\" \n          name=\"files[]\" \n          multiple\n          onChange={ \n            (e) => this.handleChange(e.target.files)\n          } \n        />\n        <br/>\n        <label>{this.state.count} out of {this.state.total}</label>\n        <br/>\n        <ClipLoader\n          className={override}\n          sizeUnit={\"px\"}\n          size={50}\n          color={'#123abc'}\n          loading={this.state.loading}\n        />\n        <br/>\n        {this.state.loading ? <label >{this.state.percentage}%</label> : null}\n      </div>\n    );\n  }\n}\n\nfunction getConnectionForExtention(name){\n  return(new Promise(function(resolve){\n    axios.get('http://localhost:8081/create?name='+(name))\n    .then(function (response) {\n      resolve(true);\n    })\n    .catch(function (error) {\n      resolve(false);\n    });\n  }))\n  \n}\n\n\nasync function sendThisFile(file, obj){\n  let start = 0;\n  let interval = 17000;\n  let end = 17000\n  let fileSize = file.size;\n  while(true){\n    if(end > fileSize){\n      end = fileSize - 1;\n    }\n    obj.setState({\n      percentage : ((end / fileSize) * 100).toFixed(2)\n    });\n    if(start >= file.size){\n      return true;\n    }\n    let flag = await blobThisFileAndSend(file, start, end);\n    if(!flag){\n      return;\n    }\n    start = end+1;\n    end = end + interval;\n  }\n}\n\nfunction blobThisFileAndSend(file, start, end){\n  return new Promise(function(resolve){\n    let reader = new FileReader();\n    reader.onloadend = async function (evt){\n      if (evt.target.readyState === FileReader.DONE) { // DONE == 2\n        let data = evt.target.result\n        let flag = await sendData(data);\n        if(!flag){\n          resolve(false);\n        }\n        else{\n          resolve(true);\n        }\n      }\n    }\n    var blob = file.slice(start, end + 1);\n    reader.readAsBinaryString(blob);\n  });\n  \n}\nfunction sendData(data){\n  return new Promise(function(resolve){\n\n    axios.post('http://localhost:8081/', {\n          data: data\n        })\n        .then(function (response) {\n          resolve(true);\n        })\n        .catch(function (error) {\n          resolve(false);\n        });\n  })\n}\nfunction makeEndRequest(){\n  return new Promise(function(resolve){\n    axios.get('http://localhost:8081/end')\n    .then(function (response) {\n      resolve(true);\n    })\n    .catch(function (error) {\n      resolve(false);\n    });\n  });\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function recursiveUpload(file, start, stop){\n//   return new Promise(function(resolve){\n//     if(start === file.size){\n//       axios.get('http://localhost:8081/end')\n//         .then(function (response) {\n//           console.log(file.name);\n//         })\n//         .catch(function (error) {\n//           console.log(error);\n//         });\n//       resolve(true);\n//     }\n//     if(stop > file.size){\n//       stop = file.size - 1;\n//     }\n//     if(stop === start){\n//       resolve(true);\n//     }\n//     var reader = new FileReader();\n//     // If we use onloadend, we need to check the readyState.\n//     reader.onloadend = (evt) => {\n//       if (evt.target.readyState === FileReader.DONE) { // DONE == 2\n//         console.log((stop/file.size )*100)\n//         let arr = evt.target.result\n//         axios.post('http://localhost:8081/', {\n//           data: arr\n//         })\n//         .then(function (response) {\n//           recursiveUpload(file, stop+1, stop+17000)\n//         })\n//         .catch(function (error) {\n//           console.log(error);\n//         });\n//       }\n//     }\n//     var blob = file.slice(start, stop + 1);\n//     reader.readAsBinaryString(blob);\n//   }); \n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}